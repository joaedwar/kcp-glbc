name: e2e

on:
  pull_request:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'samples/**'
      - 'config/deploy**'
      - 'config/grafana**'
      - 'config/kcp**'
      - 'config/observability**'
      - 'config/prometheus**'
      - 'utils/**.sh'
      - 'LICENSE'
  push:
    branches:
      - main
      - 'release-*'
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'samples/**'
      - 'config/deploy**'
      - 'config/grafana**'
      - 'config/kcp**'
      - 'config/observability**'
      - 'config/prometheus**'
      - 'utils/**.sh'
      - 'LICENSE'

concurrency:
  group: ${{ github.head_ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  kubernetes:

    runs-on: ubuntu-20.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Cleanup
        run: |
          ls -lart
          echo "Initial status:"
          df -h

          echo "Cleaning up resources:"
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          docker rmi $(docker image ls -aq)

          echo "Final status:"
          df -h
      - name: Set Go
        uses: actions/setup-go@v2
        with:
          go-version: v1.17
      - name: Kubernetes KinD GLBC Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kcp-cluster-glbc-control
          node_image: kindest/node:v1.21.1@sha256:fae9a58f17f18f06aeac9772ca8b5ac680ebbed985e266f711d936e91d113bad
          version: v0.11.0
      - name: Kubernetes KinD Cluster 1
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kcp-cluster-1
          node_image: kindest/node:v1.21.1@sha256:fae9a58f17f18f06aeac9772ca8b5ac680ebbed985e266f711d936e91d113bad
          version: v0.11.0
          config: ./e2e/kind.yaml
      - name: Kubernetes KinD Cluster 2
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: kcp-cluster-2
          node_image: kindest/node:v1.21.1@sha256:fae9a58f17f18f06aeac9772ca8b5ac680ebbed985e266f711d936e91d113bad
          version: v0.11.0
          config: ./e2e/kind.yaml
      - name: Info
        run: |
          echo "GLBC cluster:"
          kubectl --context kind-kcp-cluster-glbc-control cluster-info
          kubectl --context kind-kcp-cluster-glbc-control describe nodes

          echo "Cluster 1:"
          kubectl --context kind-kcp-cluster-1 cluster-info
          kubectl --context kind-kcp-cluster-1 describe nodes

          echo "Cluster 2:"
          kubectl --context kind-kcp-cluster-2 cluster-info
          kubectl --context kind-kcp-cluster-2 describe nodes
      - name: Run GLBC and KCP
        run: |
          echo "Building KCP"
          make kcp

          echo "Building GLBC"
          make build

          TEMP_DIR="$(pwd)/tmp"

          CLUSTERS_KUBECONFIG_DIR="${TEMP_DIR}"
          mkdir -p "${CLUSTERS_KUBECONFIG_DIR}"
          echo "CLUSTERS_KUBECONFIG_DIR=${CLUSTERS_KUBECONFIG_DIR}" >> $GITHUB_ENV
          echo "Creating Cluster manifests in directory ${CLUSTERS_KUBECONFIG_DIR}"
          kind get kubeconfig --name=kcp-cluster-1 > "${CLUSTERS_KUBECONFIG_DIR}"/kcp-cluster-1.kubeconfig
          kind get kubeconfig --name=kcp-cluster-2 > "${CLUSTERS_KUBECONFIG_DIR}"/kcp-cluster-2.kubeconfig

          echo "Deploying Ingress controller to KinD workload clusters"
          VERSION=$(curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/stable.txt)

          kubectl config use-context kind-kcp-cluster-1
          curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/"${VERSION}"/deploy/static/provider/kind/deploy.yaml | sed "s/--publish-status-address=localhost/--report-node-internal-ip-address/g" | kubectl apply -f -
          kubectl annotate ingressclass nginx "ingressclass.kubernetes.io/is-default-class=true"

          kubectl config use-context kind-kcp-cluster-2
          curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/"${VERSION}"/deploy/static/provider/kind/deploy.yaml | sed "s/--publish-status-address=localhost/--report-node-internal-ip-address/g" | kubectl apply -f -
          kubectl annotate ingressclass nginx "ingressclass.kubernetes.io/is-default-class=true"

          kubectl config use-context kind-kcp-cluster-glbc-control
          curl https://raw.githubusercontent.com/kubernetes/ingress-nginx/"${VERSION}"/deploy/static/provider/kind/deploy.yaml | sed "s/--publish-status-address=localhost/--report-node-internal-ip-address/g" | kubectl apply -f -
          kubectl annotate ingressclass nginx "ingressclass.kubernetes.io/is-default-class=true"

          KCP_LOG_FILE="${TEMP_DIR}"/kcp.log
          echo "KCP_LOG_FILE=${KCP_LOG_FILE}" >> $GITHUB_ENV
          echo "Starting KCP, sending logs to ${KCP_LOG_FILE}"
          ./bin/kcp start --discovery-poll-interval 3s --run-controllers > ${KCP_LOG_FILE} 2>&1 &
          KCP_PID=$!
          echo "KCP_PID=${KCP_PID}" >> $GITHUB_ENV

          echo "Waiting 15 seconds..."
          sleep 15

          if ! ps -p ${KCP_PID}; then
            echo "KCP failed to start, see ${KCP_LOG_FILE} for info."
            exit 1
          fi

          export KUBECONFIG="$(pwd)"/.kcp/admin.kubeconfig
          echo "Exporting KUBECONFIG=${KUBECONFIG}"
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV

          echo "Setup workspaces (kcp-glbc, kcp-glbc-compute, kcp-glbc-user, kcp-glbc-user-compute)"
          ./utils/deploy.sh -c "none"

          echo "Waiting 15 seconds..."
          sleep 15

          kubectl apply -f config/deploy/local/glbc-syncer.yaml

          # echo "Creating Compute Service Workspace"
          # ./bin/kubectl-kcp workspace use "root:default:kcp-glbc-compute"
          # kubectl create ns kcp-syncer
          # export KCP_SYNCER_IMAGE=ghcr.io/kcp-dev/kcp/syncer:release-0.5
          # ./bin/kubectl-kcp workload sync kcp-cluster-1 --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} --resources=ingresses.networking.k8s.io,services | kubectl --kubeconfig="${CLUSTERS_KUBECONFIG_DIR}"/kcp-cluster-1.kubeconfig apply -f -
          # ./bin/kubectl-kcp workload sync kcp-cluster-2 --kcp-namespace kcp-syncer --syncer-image=${KCP_SYNCER_IMAGE} --resources=ingresses.networking.k8s.io,services | kubectl --kubeconfig="${CLUSTERS_KUBECONFIG_DIR}"/kcp-cluster-2.kubeconfig apply -f -

          echo "Deploy GLBC components"
          ./bin/kubectl-kcp workspace use "root:default:kcp-glbc"
          echo "Waiting 15 seconds..."
          sleep 15
          ./utils/deploy.sh "cert-manager"

          # echo "Waiting 15 seconds..."
          # sleep 15

          # echo "Register K8s APIs"
          # kubectl apply -f ./utils/kcp-contrib/crds

          # echo "Export GLBC APIs"
          # kubectl apply -f ./utils/kcp-contrib/apiresourceschema.yaml
          # kubectl apply -f ./utils/kcp-contrib/apiexport.yaml

          echo "Waiting 15 seconds..."
          sleep 15

          GLBC_LOG_FILE="${TEMP_DIR}"/glbc.log
          echo "GLBC_LOG_FILE=${GLBC_LOG_FILE}" >> $GITHUB_ENV
          export AWS_DNS_PUBLIC_ZONE_ID=FAKE_ZONE_ID
          echo "AWS_DNS_PUBLIC_ZONE_ID=FAKE_ZONE_ID" >> $GITHUB_ENV
          echo "Starting GLBC, sending logs to ${GLBC_LOG_FILE}"
          unset KUBECONFIG
          kubectl config use-context kind-kcp-cluster-glbc-control
          ./bin/kcp-glbc --kubeconfig .kcp/admin.kubeconfig --context system:admin --dns-provider fake --glbc-tls-provided true > ${GLBC_LOG_FILE} 2>&1 &
          GLBC_PID=$!
          echo "GLBC_PID=${GLBC_PID}" >> $GITHUB_ENV

          echo "Waiting 15 seconds..."
          sleep 15

          if ! ps -p ${GLBC_PID}; then
            echo "GLBC failed to start, see ${GLBC_LOG_FILE} for info."
            exit 1
          fi
      - name: Run e2e tests
        run: |
          export KUBECONFIG=${{ env.KUBECONFIG }}
          export CLUSTERS_KUBECONFIG_DIR=${{ env.CLUSTERS_KUBECONFIG_DIR }}
          export AWS_DNS_PUBLIC_ZONE_ID=${{ env.AWS_DNS_PUBLIC_ZONE_ID }}

          # Then run e2e tests
          make e2e
      - name: Verify generated metrics documentation
        run: |
          make verify-gen-metrics-docs
      - name: Shutdown GLBC
        if: ${{ always() }}
        run: |
          echo "Kill GLBC process"
          kill ${{ env.GLBC_PID }}

          echo "Printing GLBC logs"
          cat ${{ env.GLBC_LOG_FILE }}
      - name: Shutdown KCP
        if: ${{ always() }}
        run: |
          echo "Kill KCP process"
          kill ${{ env.KCP_PID }}

          echo "Printing KCP logs"
          cat ${{ env.KCP_LOG_FILE }}